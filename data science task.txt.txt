#task1 titanic system

# Install required libraries
!pip install yfinance pandas numpy matplotlib scikit-learn tensorflow

# Import libraries
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

# Load stock data (e.g., Apple - AAPL)
df = yf.download('AAPL', start='2015-01-01', end='2022-01-01')
df = df[['Close']]  # Use only closing price

# Plot original data
plt.figure(figsize=(10,5))
plt.title('Apple Stock Closing Price')
plt.plot(df)
plt.xlabel('Date')
plt.ylabel('Close Price USD')
plt.show()

# Normalize the data
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df)

# Prepare training data (60-day lookback)
X = []
y = []

for i in range(60, len(scaled_data)):
    X.append(scaled_data[i-60:i, 0])
    y.append(scaled_data[i, 0])

X, y = np.array(X), np.array(y)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))  # Reshape for LSTM

# Build LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(50))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X, y, epochs=5, batch_size=32)

# Predict on the training set
predicted_price = model.predict(X)
predicted_price = scaler.inverse_transform(predicted_price)

# Plot the results
actual_price = scaler.inverse_transform(y.reshape(-1, 1))

plt.figure(figsize=(10,5))
plt.plot(actual_price, label='Actual Price')
plt.plot(predicted_price, label='Predicted Price')
plt.title('Stock Price Prediction (Training Data)')
plt.xlabel('Days')
plt.ylabel('Price')
plt.legend()
plt.show()



#TASK2 STOCK PRIDICTION

# Install required libraries
!pip install yfinance pandas numpy matplotlib scikit-learn tensorflow

# Import libraries
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

# Load stock data (e.g., Apple - AAPL)
df = yf.download('AAPL', start='2015-01-01', end='2022-01-01')
df = df[['Close']]  # Use only closing price

# Plot original data
plt.figure(figsize=(10,5))
plt.title('Apple Stock Closing Price')
plt.plot(df)
plt.xlabel('Date')
plt.ylabel('Close Price USD')
plt.show()

# Normalize the data
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df)

# Prepare training data (60-day lookback)
X = []
y = []

for i in range(60, len(scaled_data)):
    X.append(scaled_data[i-60:i, 0])
    y.append(scaled_data[i, 0])

X, y = np.array(X), np.array(y)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))  # Reshape for LSTM

# Build LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(50))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X, y, epochs=5, batch_size=32)

# Predict on the training set
predicted_price = model.predict(X)
predicted_price = scaler.inverse_transform(predicted_price)

# Plot the results
actual_price = scaler.inverse_transform(y.reshape(-1, 1))

plt.figure(figsize=(10,5))
plt.plot(actual_price, label='Actual Price')
plt.plot(predicted_price, label='Predicted Price')
plt.title('Stock Price Prediction (Training Data)')
plt.xlabel('Days')
plt.ylabel('Price')
plt.legend()
plt.show()